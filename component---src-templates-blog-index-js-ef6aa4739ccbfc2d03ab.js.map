{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/utils/helpers.js","webpack:///./node_modules/core-js/modules/_array-fill.js","webpack:///./src/components/Footer.js","webpack:///./src/templates/blog-index.js","webpack:///./node_modules/core-js/modules/es6.array.fill.js"],"names":["query","SEO","meta","image","title","description","slug","lang","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","formatReadingTime","minutes","cups","Math","round","Array","E","fill","join","formatPostDate","date","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","toObject","toAbsoluteIndex","toLength","module","exports","value","O","this","length","aLen","arguments","index","undefined","end","endPos","Footer","style","marginTop","rhythm","paddingTop","href","target","rel","React","Component","BlogIndexTemplate","siteTitle","get","langKey","props","pageContext","posts","Layout","location","map","node","fields","key","fontFamily","fontSize","marginBottom","boxShadow","to","frontmatter","timeToRead","dangerouslySetInnerHTML","__html","spoiler","pageQuery","$export","P"],"mappings":"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","file":"component---src-templates-blog-index-js-ef6aa4739ccbfc2d03ab.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n        social {\n          twitter\n        }\n      }\n    }\n  }\n`;\n\nfunction SEO({ meta, image, title, description, slug, lang = 'en' }) {\n  return (\n    <StaticQuery\n      query={query}\n      render={data => {\n        const { siteMetadata } = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        return (\n          <Helmet\n            htmlAttributes={{ lang }}\n            {...(title\n              ? {\n                  titleTemplate: `%s — ${siteMetadata.title}`,\n                  title,\n                }\n              : {\n                  title: `${siteMetadata.title} — A blog by xwartz`,\n                })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              {\n                name: 'twitter:creator',\n                content: siteMetadata.social.twitter,\n              },\n              {\n                name: 'twitter:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                name: 'twitter:description',\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                metaImage\n                  ? [\n                      {\n                        property: 'og:image',\n                        content: metaImage,\n                      },\n                      {\n                        name: 'twitter:image',\n                        content: metaImage,\n                      },\n                    ]\n                  : []\n              )\n              .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5);\n  let bowls = 0;\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill('🍱')\n      .join('')} ${minutes} min read`;\n  } else {\n    return `${new Array(cups || 1).fill('☕️').join('')} ${minutes} min read`;\n  }\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang) {\n  if (typeof Date.prototype.toLocaleDateString !== 'function') {\n    return date;\n  }\n\n  date = new Date(date);\n  const args = [\n    lang,\n    { day: 'numeric', month: 'long', year: 'numeric' },\n  ].filter(Boolean);\n  return date.toLocaleDateString(...args);\n}\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","import React from 'react';\n\nimport { rhythm } from '../utils/typography';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer\n        style={{\n          marginTop: rhythm(2.5),\n          paddingTop: rhythm(1),\n        }}\n      >\n        {/* <a\n          href=\"https://mobile.twitter.com/xwartzz\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          twitter\n        </a>{' '} */}\n        {/* &bull;{' '} */}\n        <span>Personal blog by </span>\n        <a\n          href=\"https://github.com/xwartz\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          xwartz\n        </a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import { Link, graphql } from 'gatsby';\nimport { formatPostDate, formatReadingTime } from '../utils/helpers';\n\nimport Footer from '../components/Footer';\nimport Layout from '../components/Layout';\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport get from 'lodash/get';\nimport { rhythm } from '../utils/typography';\n\nclass BlogIndexTemplate extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    const langKey = this.props.pageContext.langKey;\n\n    const posts = get(this, 'props.data.allMarkdownRemark.edges') || [];\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO />\n        <main>\n          {posts.map(({ node }) => {\n            const title = get(node, 'frontmatter.title') || node.fields.slug;\n            return (\n              <article key={node.fields.slug}>\n                <header>\n                  <h3\n                    style={{\n                      fontFamily: 'Montserrat, sans-serif',\n                      fontSize: rhythm(0.9),\n                      marginBottom: rhythm(1 / 4),\n                    }}\n                  >\n                    <Link\n                      style={{ boxShadow: 'none' }}\n                      to={node.fields.slug}\n                      rel=\"bookmark\"\n                    >\n                      {title}\n                    </Link>\n                  </h3>\n                  <small>\n                    {formatPostDate(node.frontmatter.date, langKey)}\n                    {` • ${formatReadingTime(node.timeToRead)}`}\n                  </small>\n                </header>\n                <p\n                  dangerouslySetInnerHTML={{ __html: node.frontmatter.spoiler }}\n                />\n              </article>\n            );\n          })}\n        </main>\n        <Footer />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndexTemplate;\n\nexport const pageQuery = graphql`\n  query($langKey: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            langKey\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`;\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n"],"sourceRoot":""}