{"componentChunkName":"component---src-templates-blog-post-js","path":"/redux-source-code-analysis/","result":{"data":{"site":{"siteMetadata":{"title":"XWARTZ","author":"xwartz"}},"markdownRemark":{"id":"58b5b75e-be0d-5fcd-ba12-3c047502483a","html":"<p>Redux 为 JavaScript 应用提供可预测化的状态管理。</p>\n<h3 id=\"原理\"><a href=\"#%E5%8E%9F%E7%90%86\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原理</h3>\n<p>使用 <code class=\"language-text\">Redux</code> 之后，数据的流向可以使用下图来表示：</p>\n<p><img src=\"/blog/404460ceece985d433e1ed1f36cd4215/flow.gif\" alt=\"flow\"></p>\n<p>(ps：其实图中的 <code class=\"language-text\">Dispatcer</code> 并不太准确，<code class=\"language-text\">Redux</code> 没有专门的 <code class=\"language-text\">Dispatcher</code>, 数据的更新是通过 <code class=\"language-text\">store</code> 中的 <code class=\"language-text\">dispatch</code> 方法。)</p>\n<p>从上图我们可以看到清晰的数据流向: <code class=\"language-text\">View</code> 触发数据更新 ---> <code class=\"language-text\">Actions</code> 将数据传递到 <code class=\"language-text\">Store</code> ---> <code class=\"language-text\">Store</code> 更新 <code class=\"language-text\">state</code> ---> 更新 <code class=\"language-text\">View</code>。</p>\n<p><code class=\"language-text\">Redux</code> 中整个应用的状态存储在一棵 <code class=\"language-text\">object tree</code> 中，对应一个唯一的 <code class=\"language-text\">Store</code>，并且 <code class=\"language-text\">state</code> 是只读的，使用纯函数来更新 <code class=\"language-text\">state</code> 会生成一个新的 <code class=\"language-text\">state</code> 而不是直接修改原来的。</p>\n<p><code class=\"language-text\">Redux</code> 通过以上约束试图让状态的变化可预测。</p>\n<h3 id=\"源码分析\"><a href=\"#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>源码分析</h3>\n<p><code class=\"language-text\">Redux</code> 的源码非常少，但是却实现了这样一个数据流的管理，非常值得阅读学习。</p>\n<p><code class=\"language-text\">Redux</code> 的源码并不是非常容易理解的，包含很多闭包和高阶函数的使用导致理解起来有点绕。</p>\n<p>了解了原理之后，对 <code class=\"language-text\">Redux</code> 源码的分析，就简单许多。</p>\n<p>源码结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── applyMiddleware.js\n├── bindActionCreators.js\n├── combineReducers.js\n├── compose.js\n├── createStore.js\n├── index.js\n└── utils\n    └── warning.js</code></pre></div>\n<h4 id=\"indexjs\"><a href=\"#indexjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>index.js</h4>\n<p>从入口文件 <code class=\"language-text\">index.js</code> 开始，删除了部分 <code class=\"language-text\">warning</code> 代码</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> createStore <span class=\"token keyword\">from</span> <span class=\"token string\">'./createStore'</span>\n<span class=\"token keyword\">import</span> combineReducers <span class=\"token keyword\">from</span> <span class=\"token string\">'./combineReducers'</span>\n<span class=\"token keyword\">import</span> bindActionCreators <span class=\"token keyword\">from</span> <span class=\"token string\">'./bindActionCreators'</span>\n<span class=\"token keyword\">import</span> applyMiddleware <span class=\"token keyword\">from</span> <span class=\"token string\">'./applyMiddleware'</span>\n<span class=\"token keyword\">import</span> compose <span class=\"token keyword\">from</span> <span class=\"token string\">'./compose'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>\n  createStore<span class=\"token punctuation\">,</span>\n  combineReducers<span class=\"token punctuation\">,</span>\n  bindActionCreators<span class=\"token punctuation\">,</span>\n  applyMiddleware<span class=\"token punctuation\">,</span>\n  compose\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从上面可以看出，<code class=\"language-text\">Redux</code> 暴露的顶层 <code class=\"language-text\">API</code> 就只有 4 个。</p>\n<p>接下来分析每个 <code class=\"language-text\">API</code> 。</p>\n<h4 id=\"createstorejs\"><a href=\"#createstorejs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>createStore.js</h4>\n<p>用来创建 <code class=\"language-text\">store</code>，其中暴露 <code class=\"language-text\">dispatch</code>, <code class=\"language-text\">subscribe</code>, <code class=\"language-text\">getState</code>, <code class=\"language-text\">replaceReducer</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * 初始化时，默认传递的 action，默认也应该返回初始化的 state\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> ActionTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">INIT</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'@@redux/INIT'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 创建 store, 参数根 reducer, state 以及中间件\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> preloadedState <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    enhancer <span class=\"token operator\">=</span> preloadedState\n    preloadedState <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> enhancer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the enhancer to be a function.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">enhancer</span><span class=\"token punctuation\">(</span>createStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reducer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the reducer to be a function.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> currentReducer <span class=\"token operator\">=</span> reducer\n  <span class=\"token keyword\">var</span> currentState <span class=\"token operator\">=</span> preloadedState\n  <span class=\"token keyword\">var</span> currentListeners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">var</span> nextListeners <span class=\"token operator\">=</span> currentListeners\n  <span class=\"token keyword\">var</span> isDispatching <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n  <span class=\"token comment\">// 去除引用</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ensureCanMutateNextListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextListeners <span class=\"token operator\">===</span> currentListeners<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      nextListeners <span class=\"token operator\">=</span> currentListeners<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Reads the state tree managed by the store.\n   * @returns {any} The current state tree of your application.\n   */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> currentState\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 订阅事件，返回移除订阅函数，巧妙的利用了闭包</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">listener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> listener <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected listener to be a function.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">var</span> isSubscribed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n    <span class=\"token function\">ensureCanMutateNextListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nextListeners<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isSubscribed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n\n      isSubscribed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n      <span class=\"token function\">ensureCanMutateNextListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> index <span class=\"token operator\">=</span> nextListeners<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span>\n      nextListeners<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 执行 reducer，并触发订阅事件</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// https://lodash.com/docs#isPlainObject</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Actions must be plain objects. '</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'Use custom middleware for async actions.'</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Actions may not have an undefined \"type\" property. '</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'Have you misspelled a constant?'</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDispatching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Reducers may not dispatch actions.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      isDispatching <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n      <span class=\"token comment\">// 产生新的 state</span>\n      currentState <span class=\"token operator\">=</span> <span class=\"token function\">currentReducer</span><span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      isDispatching <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 触发订阅的事件</span>\n    <span class=\"token keyword\">var</span> listeners <span class=\"token operator\">=</span> currentListeners <span class=\"token operator\">=</span> nextListeners\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> listeners<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      listeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> action\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * 动态替换 reducer\n   */</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">replaceReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextReducer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> nextReducer <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected the nextReducer to be a function.'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    currentReducer <span class=\"token operator\">=</span> nextReducer\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> ActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INIT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> ActionTypes<span class=\"token punctuation\">.</span><span class=\"token constant\">INIT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    dispatch<span class=\"token punctuation\">,</span>\n    subscribe<span class=\"token punctuation\">,</span>\n    getState<span class=\"token punctuation\">,</span>\n    replaceReducer\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"combinereducersjs\"><a href=\"#combinereducersjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>combineReducers.js</h3>\n<p><code class=\"language-text\">combineReducers</code> 用于拆分 <code class=\"language-text\">reducer</code>，拆分后的每一块独立负责管理 <code class=\"language-text\">state</code> 的一部分，方便管理复杂的应用。</p>\n<p><code class=\"language-text\">combineReducers</code> 返回一个函数可以将传入的 <code class=\"language-text\">reducers</code> 都调用一遍合成一个大的 <code class=\"language-text\">state</code>。</p>\n<p>比如有 <code class=\"language-text\">reducer</code>: r1, r2, r3;\n将 <code class=\"language-text\">{ r1, r2, r3 }</code> 传入 <code class=\"language-text\">combineReducers</code> 将返回一个可以产生这样的 <code class=\"language-text\">state</code>: <code class=\"language-text\">{ r1: {}, r2: {}, r3: {} }</code>  的函数。</p>\n<p>其中很长一段代码都是对 <code class=\"language-text\">reducers</code> 合法性的检测，这里只需要分析下 <code class=\"language-text\">combineReducers</code> 函数的实现，一些代码已经删除掉了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reducers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> reducerKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 将 reducers 存储在一个对象中</span>\n  <span class=\"token keyword\">var</span> finalReducers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> reducerKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> reducerKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token operator\">...</span> 省略 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">reducer</span><span class=\"token template-punctuation string\">`</span></span> 的合理性检测\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      finalReducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> reducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">var</span> finalReducerKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>finalReducers<span class=\"token punctuation\">)</span>\n\n  <span class=\"token operator\">...</span>省略 <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">reducer</span><span class=\"token template-punctuation string\">`</span></span> 的不合理的处理\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">combination</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> hasChanged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    <span class=\"token keyword\">var</span> nextState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 遍历调用 reducers，产生一个大的 state，key 和 reducer 名对应</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> finalReducerKeys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> finalReducerKeys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">var</span> reducer <span class=\"token operator\">=</span> finalReducers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">var</span> previousStateForKey <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">var</span> nextStateForKey <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>previousStateForKey<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n\n      nextState<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextStateForKey\n      hasChanged <span class=\"token operator\">=</span> hasChanged <span class=\"token operator\">||</span> nextStateForKey <span class=\"token operator\">!==</span> previousStateForKey\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> hasChanged <span class=\"token operator\">?</span> nextState <span class=\"token punctuation\">:</span> state\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"bindactioncreatorsjs\"><a href=\"#bindactioncreatorsjs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bindActionCreators.js</h4>\n<p>类似 <code class=\"language-text\">combineReducers</code>, <code class=\"language-text\">bindActionCreators</code> 函数把 <code class=\"language-text\">action creators</code> 转成拥有同名 <code class=\"language-text\">keys</code> 的对象，\n并使用 <code class=\"language-text\">dispatch</code> 把每个 <code class=\"language-text\">action creator</code> 包装起来，这样在调用 <code class=\"language-text\">action</code> 时可以直接调用 <code class=\"language-text\">dispatch</code>。</p>\n<p>也就是说不需要将 <code class=\"language-text\">dispatch</code> 手动传入到子组件中了。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 在 action 外部包装一层 dispatch</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">actionCreator<span class=\"token punctuation\">,</span> dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">actionCreator</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">actionCreators<span class=\"token punctuation\">,</span> dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 如果是函数，这种情况一般就只有一个 action</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreators <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">...</span>\n\n  <span class=\"token comment\">// 遍历 actions ，包装一层 dispatch</span>\n  <span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>actionCreators<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> boundActionCreators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> actionCreator <span class=\"token operator\">=</span> actionCreators<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> actionCreator <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      boundActionCreators<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actionCreator<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> boundActionCreators\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"composejs\"><a href=\"#composejs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compose.js</h4>\n<p><code class=\"language-text\">compose</code> 的作用是从右到左来组合多个函数，不使用深度右括号的情况下来写深度嵌套的函数，内部实现其实就是一个 <code class=\"language-text\">reduceRight</code>。</p>\n<p>关于 <code class=\"language-text\">reduceRight</code>, 查看 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight</a></p>\n<p>比如 <code class=\"language-text\">a(b(c()))</code> 可以这样写 <code class=\"language-text\">compose(a,b,c)</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>funcs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>funcs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> arg\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>funcs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> funcs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> funcs<span class=\"token punctuation\">[</span>funcs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> rest <span class=\"token operator\">=</span> funcs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">reduceRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">composed<span class=\"token punctuation\">,</span> f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>composed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"applymiddlewarejs\"><a href=\"#applymiddlewarejs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>applyMiddleware.js</h4>\n<p><code class=\"language-text\">applyMiddleware</code> 最终返回的是一个作用了 <code class=\"language-text\">middlewares</code> 的 <code class=\"language-text\">store</code>。</p>\n<p>之后 <code class=\"language-text\">store.dispatch</code> 的调用都会经历各个 <code class=\"language-text\">middleware</code>，所以你就可以在中间件中做一些额外的事情，比如打印日志。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> compose <span class=\"token keyword\">from</span> <span class=\"token string\">'./compose'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>middlewares</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 返回一个接收 createStore 的函数</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">createStore</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token comment\">// 返回一个接收 reducer, preloadedState, enhancer 的函数</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 创建 store</span>\n    <span class=\"token keyword\">var</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> preloadedState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> dispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\n    <span class=\"token keyword\">var</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">var</span> middlewareAPI <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      getState<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span>getState<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">dispatch</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 作用每个 middleware</span>\n    chain <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">middleware</span> <span class=\"token operator\">=></span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>middlewareAPI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 将 dispatch 传给最后一个 middleware</span>\n    dispatch <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 返回作用 middleware 之后的 store</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>store<span class=\"token punctuation\">,</span>\n      dispatch\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>每个 <code class=\"language-text\">middleware</code> 接受 <code class=\"language-text\">Store</code> 的 <code class=\"language-text\">dispatch</code> 和 <code class=\"language-text\">getState</code> 函数作为命名参数，并返回一个函数。\n该函数会被传入 被称为 <code class=\"language-text\">next</code> 的下一个 <code class=\"language-text\">middleware</code> 的 <code class=\"language-text\">dispatch</code> 方法，并返回一个接收 <code class=\"language-text\">action</code> 的新函数，\n这个函数可以直接调用 <code class=\"language-text\">next(action)</code>，或者在其他需要的时刻调用，甚至根本不去调用它。</p>\n<p>调用链中最后一个 <code class=\"language-text\">middleware</code> 会接受真实的 <code class=\"language-text\">store</code> 的 <code class=\"language-text\">dispatch</code> 方法作为 <code class=\"language-text\">next</code> 参数，并借此结束调用链。</p>\n<p>所以，<code class=\"language-text\">middleware</code> 的函数签名是 <code class=\"language-text\">({ getState, dispatch }) =&gt; next =&gt; action</code>。</p>\n<p>一个简单 <code class=\"language-text\">middleware</code> 可以这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> getState <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'will dispatch'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 调用 middleware 链中下一个 middleware 的 dispatch。</span>\n    <span class=\"token keyword\">let</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state after dispatch'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 一般会是 action 本身，除非</span>\n    <span class=\"token comment\">// 后面的 middleware 修改了它。</span>\n    <span class=\"token keyword\">return</span> returnValue\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当调用 <code class=\"language-text\">store.dispatch</code> 之后，会打印出 <code class=\"language-text\">will dispatch xxx</code>, <code class=\"language-text\">state after dispatch xxx</code> 信息。</p>\n<h3 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h3>\n<p><code class=\"language-text\">Redux</code> 的代码里使用高阶函数来简化代码，但是阅读起来并不容易理解，会明显感觉有些绕。</p>","timeToRead":9,"frontmatter":{"title":"Redux 解析","date":"August 09, 2016","spoiler":"使用 `Redux` 这么久，理一下"},"fields":{"slug":"/redux-source-code-analysis/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/redux-source-code-analysis/","previous":{"fields":{"slug":"/javascript-inheritance/","langKey":"en","directoryName":"javascript-inheritance","maybeAbsoluteLinks":[]},"frontmatter":{"title":"JavaScript 继承"}},"next":{"fields":{"slug":"/casperjs/","langKey":"en","directoryName":"casperjs","maybeAbsoluteLinks":[]},"frontmatter":{"title":"CasperJS"}},"translations":[],"translatedLinks":[]}}}