{"componentChunkName":"component---src-templates-blog-post-js","path":"/casperjs/","result":{"data":{"site":{"siteMetadata":{"title":"XWARTZ","author":"xwartz"}},"markdownRemark":{"id":"8c164ff7-bace-5301-83d8-f299fc2e9d8b","html":"<p>这是一篇使用 CasperJS 的一些经验记录，后续有遇到坑，或者什么使用心得就继续更新到这里了。</p>\n<hr>\n<p>写过前端单元测试的朋友，应该都知道 PhantomJS，我之前也写过几篇<a href=\"https://github.com/xwartz/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">单元测试</a>相关的文章，也有用到。</p>\n<blockquote>\n<p>PhantomJS 是一个基于 WebKit 的服务器端 JavaScript API, 无需浏览器的支持即可实现对 Web 的支持，\n且原生支持各种 Web 标准，如 DOM 处理、JavaScript、CSS 选择器、JSON、Canvas 和可缩放矢量图形 SVG。</p>\n</blockquote>\n<p>PhantomJS 形成的一些不错的开源生态圈内容, 相关项目：</p>\n<ul>\n<li>CasperJS：一个开源的导航脚本处理和高级测试工具</li>\n<li>Poltergeist ：测试工具Capybara的测试驱动</li>\n<li>Guard::Jasmine：能够基于Rails实现自动化测试Jasmine的Specs</li>\n<li>GhostDriver：远程 WebDriver 有线协议的开源实现</li>\n<li>PhantomRobot：PhantomJS机器人测试框架</li>\n<li>Mocha-PhantomJS：JavaScript测试框架Mocha的客户端</li>\n</ul>\n<p>一个完整、活跃的生态圈是选择一个框架的重要参考，所以这也是相比 Vuejs 我更看好 Reactjs 的原因，跑偏了…😂</p>\n<p>CasperJS 是一个用 JavaScript 编写的, 基于 PhantomJS 的导航脚本和测试工具,</p>\n<p>它简化了定义一个完整的导航操作所需的步骤, 还提供了很有用的函数封装、方法和语法糖, 它可以完成下面这些常见任务:</p>\n<blockquote>\n<ul>\n<li>定义 &#x26; 排序浏览器导航步骤</li>\n<li>填充 &#x26; 提交表单</li>\n<li>点击 &#x26; 跟踪链接</li>\n<li>捕获网页截图 (还可以截取某一区域)</li>\n<li>在远程DOM上进行断言测试</li>\n<li>记录事件</li>\n<li>下载资源,包括二进制文件</li>\n<li>编写功能测试套件,结果保存为JUnit XML文件</li>\n<li>抓取网页内容</li>\n</ul>\n</blockquote>\n<h3 id=\"起因\"><a href=\"#%E8%B5%B7%E5%9B%A0\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>起因</h3>\n<p>最初的想法是想做一套前端流程测试，每次手动重复测试总是很烦的，流程是这样子的:</p>\n<p><code class=\"language-text\">用户登录 --&gt; 选择商品 --&gt; 下单 --&gt; 跳转到收银台 --&gt; 确认付款</code></p>\n<p>当然这个流程并没有看起来这么简单，必须要模拟用户的网页操作，比如：</p>\n<ol>\n<li>登录这步得解决验证码问题</li>\n<li>不同的付款方式：快捷支付得发送短信；使用支付宝二维码、微信二维码；以及跳转到其他的平台支付等</li>\n</ol>\n<p>然后使用 PhantomJS 来模拟用户操作，当然各种问题还在解决中。</p>\n<p>在试图解决问题的时候，首先调研了下一些前端测试框架，主要是 UI 测试、流程测试方面的，做了一些尝试。</p>\n<h3 id=\"起手式\"><a href=\"#%E8%B5%B7%E6%89%8B%E5%BC%8F\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>起手式</h3>\n<p>首先我们来看下 <a href=\"https://github.com/ariya/phantomjs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PhantomJS</a> 的使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> page <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">//新建一个页面</span>\npage<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                  <span class=\"token comment\">//导航到第一个URL</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span> phantom<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">//如果发生错误,退出程序</span>\n    page<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>              <span class=\"token comment\">//否则在页面加载完成的回调函数中继续导航到第二个URL,依次类推</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span> phantom<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        page<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span> phantom<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            page<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>url4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">)</span> phantom<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">// 我可以停下来了吗?</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这是一个在 PhantomJS 中使用链式回调来进行导航操作的例子，写起来相当痛苦。</p>\n<p>比对一下使用 Casperjs</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> casper <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'casper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>           <span class=\"token comment\">//新建一个页面</span>\ncasper<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">)</span>                                <span class=\"token comment\">//添加第一个URL</span>\ncasper<span class=\"token punctuation\">.</span><span class=\"token function\">thenOpen</span><span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">)</span>                             <span class=\"token comment\">//添加第二个URL,依次类推</span>\ncasper<span class=\"token punctuation\">.</span><span class=\"token function\">thenOpen</span><span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">)</span>\ncasper<span class=\"token punctuation\">.</span><span class=\"token function\">thenOpen</span><span class=\"token punctuation\">(</span>url4<span class=\"token punctuation\">)</span>\ncasper<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>异步操作更方便了，更多的 API 看官方文档 <a href=\"http://docs.casperjs.org/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://docs.casperjs.org/en/latest/</a> 。</p>\n<h3 id=\"正题\"><a href=\"#%E6%AD%A3%E9%A2%98\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>正题</h3>\n<p>以上简单介绍了下使用方法，现在使用 Casperjs 来做点实际的尝试。</p>\n<p>注册 github 账户：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> casper <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'casper'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出信息</span>\n<span class=\"token keyword\">var</span> ca <span class=\"token operator\">=</span> casper<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  verbose<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 实时输出</span>\n  logLevel<span class=\"token punctuation\">:</span> <span class=\"token string\">'debug'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出 dom 页面执行的 console 信息</span>\nca<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'remote.message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token string\">'COMMENT'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'iamrobot1'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token punctuation\">:</span> <span class=\"token string\">'iamrobot1@gmail.com'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 假邮箱</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token string\">'iamrobot1'</span> <span class=\"token comment\">// 密码需要包含数字</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> signupUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://github.com/join?source=header-home'</span>\nca<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>signupUrl<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 打开页面</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">thenEvaluate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 加载完页面，执行 js 处理表单</span>\n    <span class=\"token keyword\">var</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    form<span class=\"token punctuation\">[</span><span class=\"token string\">'user[login]'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>name\n    form<span class=\"token punctuation\">[</span><span class=\"token string\">'user[email]'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>email\n    form<span class=\"token punctuation\">[</span><span class=\"token string\">'user[password]'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>password\n    form<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'First, create a new user'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n\nca<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exit'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Done!'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意这里</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 启动</span>\nca<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 执行完任务，记得退出</span>\n  ca<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>以上流程可以注册 github 账户，然后接下来就可以干点其他事了…</p>\n<p>当然上面方式只能注册一个账户，当我想注册多个账户时，可以写一个循环，然后随机创建信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ca<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span> <span class=\"token comment\">// 注册过程</span>\n\n  ca<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span>\n    <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>因此，写了一个 github 的自动 star 程序 <a href=\"https://github.com/xwartz/robot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">robot</a>。</p>\n<h4 id=\"在这过程中，遇到几个可以记一下的东西：\"><a href=\"#%E5%9C%A8%E8%BF%99%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8C%E9%81%87%E5%88%B0%E5%87%A0%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%AE%B0%E4%B8%80%E4%B8%8B%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在这过程中，遇到几个可以记一下的东西：</h4>\n<ol>\n<li>exit 方法是一个异步的过程。</li>\n<li>start/open 方法打开新的页面，类似于浏览器打开新的 tab。</li>\n<li>casper.create 只能创建一次。</li>\n</ol>\n<p>关于第三点查看 <a href=\"http://stackoverflow.com/questions/25883624/declare-two-or-more-casper-in-a-single-script\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Declare two or more casper in a single script</a>。</p>\n<p>所以要注册多个账户的时候需要先退出登录。</p>\n<h4 id=\"疑惑：\"><a href=\"#%E7%96%91%E6%83%91%EF%BC%9A\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>疑惑：</h4>\n<ol>\n<li>监听 <code class=\"language-text\">exit</code> 事件，打开多个页面，最后会触发多次</li>\n<li><code class=\"language-text\">waitFor</code> 设置 <code class=\"language-text\">timeout</code> 无效，貌似只能在 <code class=\"language-text\">create</code> 的时候设置 <code class=\"language-text\">stepTimeout</code>，或者说是要比 <code class=\"language-text\">stepTimeout</code> 值要小？</li>\n<li>操作步骤多的时候，会经常出现这个错误 <a href=\"https://github.com/casperjs/casperjs/issues/1689\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Maximum step execution timeout exceeded for step</a></li>\n</ol>\n<h4 id=\"缺点\"><a href=\"#%E7%BC%BA%E7%82%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>缺点</h4>\n<ol>\n<li>PhantomJS 对 ES6 支持不友好，ES6 语法也没法使用</li>\n<li>不能 require Nodejs 的 native 方法，所以 npm 安装的很多模块就不能使用了，<a href=\"http://phantomjs.org/api/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API 文档</a></li>\n</ol>\n<h3 id=\"一些经验\"><a href=\"#%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些经验</h3>\n<ol>\n<li>使用 npm 安装 phantomjs-prebuilt，替代全局安装 phantomjs</li>\n<li>不推荐使用 phantomjs-node</li>\n<li>推荐 <a href=\"https://github.com/marak/Faker.js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">faker.js</a> 创建模拟数据</li>\n<li>推荐<a href=\"https://github.com/ckknight/random-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">random-js</a> 创建随机数据</li>\n<li>上传图片接口 <a href=\"http://phantomjs.org/api/webpage/method/upload-file\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">upload-file</a></li>\n</ol>\n<p>暂时就这些。</p>\n<h3 id=\"结论\"><a href=\"#%E7%BB%93%E8%AE%BA\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结论</h3>\n<p>使用 CasperJS/PhantomJS 可以做很多自动化的事，值得尝试，不怕被辞…</p>\n<p>最后，用 Python 的朋友可以看下这个 <a href=\"http://docs.seattlerb.org/mechanize/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mechanize</a>，类似 PhantomJS 的 Python 实现。</p>\n<h3 id=\"资源\"><a href=\"#%E8%B5%84%E6%BA%90\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>资源</h3>\n<p><a href=\"http://docs.casperjs.org/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CasperJS</a>\n<a href=\"http://phantomjs.org/documentation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PhantomJS</a>\n<a href=\"https://www.npmjs.com/package/phantomjs-prebuilt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">phantomjs-prebuilt</a>\n<a href=\"https://github.com/amir20/phantomjs-node\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">phantomjs-node</a>\n<a href=\"http://www.cnblogs.com/ziyunfei/archive/2012/09/27/2706254.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[译]CasperJS,基于PhantomJS的工具包</a>\n<a href=\"https://nicolas.perriault.net/code/2012/casperjs-hits-1-0-stable/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nicolas’s blog</a></p>","timeToRead":9,"frontmatter":{"title":"CasperJS","date":"September 20, 2016","spoiler":"这不是一篇介绍使用 CasperJS 进行单元测试的文章"},"fields":{"slug":"/casperjs/","langKey":"en"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/casperjs/","previous":{"fields":{"slug":"/redux-source-code-analysis/","langKey":"en","directoryName":"redux-source-code-analysis","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Redux 解析"}},"next":{"fields":{"slug":"/start-up-from-new-mac/","langKey":"en","directoryName":"start-up-from-new-mac","maybeAbsoluteLinks":[]},"frontmatter":{"title":"重来：搭建开发环境"}},"translations":[],"translatedLinks":[]}}}